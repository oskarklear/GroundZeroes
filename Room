import java.util.Set;
import java.util.HashMap;
import java.io.PrintStream;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import java.util.ArrayList;

/**
 * Class Room - a room in an adventure game.
 *
 * This class is part of the "Ground Zeroes" application. 
 * "Ground Zeroes" is an advanced, text based adventure game.  
 *
 * A "Room" represents one location in the scenery of the game.  It is 
 * connected to other rooms via exits.  For each existing exit, the room 
 * stores a reference to the neighboring room.
 * 
 * This class also modifies the rooms in several different ways, including having guards, adding items, and more.
 * 
 * @author  Oskar Klear
 * @version 2018.02.16
 */

public class Room 
{
    private String description;
    private HashMap<String, Room> exits;        // stores exits of this room.
    private boolean canShoot;
    private boolean canInterrogate;
    private String name;
    private boolean hasItem;
    private String item;
    private boolean hasGuard;
    /**
     * Create a room described "description". Initially, it has
     * no exits. "description" is something like "a kitchen" or
     * "an open court yard".
     * @param description The room's description.
     */
    public Room(String description) 
    {
        this.description = description;
        exits = new HashMap<String, Room>();
        hasItem = false;
    }

    /**
     * Define an exit from this room.
     * @param direction The direction of the exit.
     * @param neighbor  The room to which the exit leads.
     */
    public void setExit(String direction, Room neighbor) 
    {
        exits.put(direction, neighbor);
    }

    /**
     * @return The short description of the room
     * (the one that was defined in the constructor).
     */
    public String getShortDescription()
    {
        return description;
    }

    /**
     * Return a description of the room in the form:
     *     You are in the kitchen.
     *     Exits: north west
     * @return A long description of this room
     */
    public String getLongDescription()
    {
        return "You are " + description + ".\n" + getExitString();
    }
    /**
     * Sets the current room to be able to be shot.
     */
    public void setCanShoot(boolean shootable)
    {
        canShoot = shootable;
    }
    /**
     * Returns true if you can shoot an object in the current room.
     */
    public boolean getCanShoot()
    {
        return canShoot;
    }
    /**
     * Sets the current room to 'interrogateable', simply a boolean check.
     */
    public void setCanInterrogate(boolean interrogateable)
    {
        canInterrogate = interrogateable;
    }
    /**
     * Returns a value depending on whether or not the current room can be interrogated, only true if the current room has a guard in it (determined by the Game class.) 
     */
    public boolean getCanInterrogate()
    {
        return canInterrogate;
    }
    /**
     * Return a string describing the room's exits, for example
     * "Exits: north west".
     * @return Details of the room's exits.
     */
    private String getExitString()
    {
        String returnString = "Exits:";
        Set<String> keys = exits.keySet();
        for(String exit : keys) {
            returnString += " " + exit;
        }
        return returnString;
    }

    /**
     * Return the room that is reached if we go from this room in direction
     * "direction". If there is no room in that direction, an error is printed through the Game class.
     * @param direction The exit's direction.
     * @return The room in the given direction.
     */
    public Room getExit(String direction) 
    {
        return exits.get(direction);
    }
    /**
     * Creates an item in a room
     */
    public void setItem(String itemName)
    {
        hasItem = true;
        item = itemName;
    }
    /**
     * Sets if a room has an item.
     */
    public void setHasItem(boolean hasItm)
    {
        hasItem = hasItm;
    }
    /**
     * Returns if the current room has an item.
     */
    public boolean hasItem()
    {
        return hasItem;
    }
    /**
     * Returns the item string.
     */
    public String getItem()
    {
        return item;
    }
    /**
     * Sets a room to have a guard in it.
     */
    public void setHasGuard(boolean hasguard)
    {
        hasGuard = hasguard;
    }
    /**
     * Returns if the current room has a guard in it.
     */
    public boolean hasGuard()
    {
        return hasGuard;
    }
}

